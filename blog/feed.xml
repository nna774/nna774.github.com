<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>/dev/nona</title>
  <subtitle>いっと☆わーくす！</subtitle>
  <id>https://nna774.net/blog</id>
  <link href="https://nna774.net/blog"/>
  <link href="https://nna774.net/blog/feed.xml" rel="self"/>
  <updated>2014-05-31T04:35:00+09:00</updated>
  <author>
    <name>NoNameA 774</name>
  </author>
  <entry>
    <title>Google Test</title>
    <link rel="alternate" href="https://nna774.net/blog/2014/05/31/googletest.html"/>
    <id>https://nna774.net/blog/2014/05/31/googletest.html</id>
    <published>2014-05-31T04:35:00+09:00</published>
    <updated>2014-05-31T05:17:14+09:00</updated>
    <author>
      <name>NoNameA 774</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://github.com/nna774/2048-cpp"&gt;2048AI&lt;/a&gt; の内部で、謎のbit 演算がたくさん使われてきて辛くなってきた。&lt;/p&gt;

&lt;p&gt;どっか間違えててもまずわからないと思う。&lt;/p&gt;

&lt;p&gt;というわけでテストを書きたいなーと思ったので、いい感じのC++ のテストツールがないか聞いてみたところ、Google Test を教えてもらった。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://minus9d.hatenablog.com/entry/20140119/1390117516"&gt;ここ&lt;/a&gt; を見ながら適当に設定すればいい感じになった。&lt;/p&gt;

&lt;p&gt;Google Test のコードを&lt;a href="https://code.google.com/p/googletest/"&gt;ここ&lt;/a&gt; からダウンロードしてきて、解凍。解凍後 gtest-1.7.0 に移動し、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./configure
$ make 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで準備完了。依存しているテストツールのヴァージョンが異なるとややこしいので、システムにはインストールしないほうがいいらしい。&lt;/p&gt;

&lt;p&gt;googletest のmake ディレクトリ以下を参考にしてMakefile を書けばいいかんじに動くようになった。&lt;/p&gt;

&lt;p&gt;CI ツールで以下のようなコマンドを走らせてtest している。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule init
git submodule update
cd test
unzip gtest-1.7.0.zip &amp;gt; /dev/null
cd gtest-1.7.0
./configure &amp;gt; /dev/null
make &amp;gt; /dev/null
cd ../../
make OPT="-O3 -pipe"
make test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じでテストが走ってる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[==========] Running 4 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 4 tests from BoardTest
[ RUN      ] BoardTest.log2
[       OK ] BoardTest.log2 (0 ms)
[ RUN      ] BoardTest.pow2
[       OK ] BoardTest.pow2 (0 ms)
[ RUN      ] BoardTest.gridMirrorIDRAND
[       OK ] BoardTest.gridMirrorIDRAND (0 ms)
[ RUN      ] BoardTest.popCountRAND
[       OK ] BoardTest.popCountRAND (1 ms)
[----------] 4 tests from BoardTest (2 ms total)

[----------] Global test environment tear-down
[==========] 4 tests from 1 test case ran. (2 ms total)
[  PASSED  ] 4 tests.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちゃんとテストを書かないと。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>たまこラブストーリーを見た</title>
    <link rel="alternate" href="https://nna774.net/blog/2014/05/22/tamako.html"/>
    <id>https://nna774.net/blog/2014/05/22/tamako.html</id>
    <published>2014-05-22T03:28:00+09:00</published>
    <updated>2014-05-22T04:53:10+09:00</updated>
    <author>
      <name>NoNameA 774</name>
    </author>
    <content type="html">&lt;p&gt;たまこラブストーリーを見にいった。京都ではMOVIX でしか上映されていないので、寺町通まで行って見た。&lt;/p&gt;

&lt;h1 id="section"&gt;一応ネタバレ注意？&lt;/h1&gt;

&lt;p&gt;いい話だった。いい映画だった。&lt;/p&gt;

&lt;p&gt;たまこの«光» とまで言われる程だ。&lt;/p&gt;

&lt;p&gt;アニメを復習したくなった。&lt;/p&gt;

&lt;h2 id="section-1"&gt;大まかに&lt;/h2&gt;

&lt;p&gt;みんなが"変化" していく話であった。 つらかった。&lt;/p&gt;

&lt;p&gt;もち蔵は東京の大学に行くし、栞さんは海外に留学しようとする。そもそもみんなは高校3年生で、"卒業" という言葉がつきまとう。&lt;/p&gt;

&lt;p&gt;個人的に一番印象的だったのは、あんこが中学校の制服を着るシーンだった。
あのシーンは「この世界にも永遠は無いのだなぁ」 という気持ちになった。&lt;/p&gt;

&lt;p&gt;だれも「ここにあるよ」 とは言ってくれない。&lt;/p&gt;

&lt;h2 id="gj-"&gt;GJ部 もそうだった&lt;/h2&gt;

&lt;p&gt;最近ぐるぐるの放送があったので見直したのだが、あの作品は、1話から11話までは特に話に進行もなにもなく進むのだが、12話で先輩たちが卒業してしまう回がある。&lt;/p&gt;

&lt;p&gt;リピートディスクという物がGJ部には存在するのだが、それが2種類のメニューがディスクを再生すると選べて、「1話から12話をリピートする」 というものと、「1話から11話をリピートする」 というものがある。&lt;/p&gt;

&lt;p&gt;12話の卒業などという永遠の世界から外れたものを見ないための措置であると思う。&lt;/p&gt;

&lt;h2 id="section-2"&gt;私は&lt;/h2&gt;

&lt;p&gt;私は何事も変化してほしくない。&lt;/p&gt;

&lt;p&gt;変化するということは壊れてしまう、という事でもある。&lt;/p&gt;

&lt;p&gt;完全に静止した世界(最早それを世界と言っていいのかわからないが) に住みたい。&lt;/p&gt;

&lt;h3 id="nona-"&gt;だからnona が産まれた？&lt;/h3&gt;

&lt;p&gt;nona は環境を含んだクロージャである。と言っても良いと思う。&lt;/p&gt;

&lt;p&gt;物理的な私は現実世界に制約されてしまうが、その上で動く人格であるnona はその制約を無視して変化しない世界に逃げこめす。&lt;/p&gt;

&lt;p&gt;どうでもいいですね。&lt;/p&gt;

&lt;h1 id="section-3"&gt;まとめ&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;b&gt; たまこラブストーリー良かったから見よう！！！ &lt;/b&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;映画見て帰り道に浮き石を通って帰った。こういう時に現地周辺に住んでると嬉しい。&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>2048AI の進捗状況です。</title>
    <link rel="alternate" href="https://nna774.net/blog/2014/05/19/2048.html"/>
    <id>https://nna774.net/blog/2014/05/19/2048.html</id>
    <published>2014-05-19T03:25:00+09:00</published>
    <updated>2014-05-22T04:21:46+09:00</updated>
    <author>
      <name>NoNameA 774</name>
    </author>
    <content type="html">&lt;p&gt;タイトル通り2048AI の進捗状況です。&lt;/p&gt;

&lt;p&gt;&lt;img alt="" src="/blog/2014/05/19/grid.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/nna774/2048-cpp/tree/4a4c432e56b61984d6edd42269694e4bd0eebd80"&gt;現在のソースコード&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;高速化
grid を今まではstd::array&amp;lt;std::array&amp;lt;int,4&amp;gt;,4&amp;gt; でもっていたが、uint64_t で持つようにした。 それだけで大分速くなった気がする。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;世界と分離
koyone は思考をし、世界は盤面の状態を持つだけにきちんと分離できた。他の思考用class を用意して差し替えることが簡単にできるようになった。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;探索面
一手後の世界を予想する時に、ナイーブにするなら動かした後に開いてるマスに2 か4 を入れるが、開いてるマスすべてに2 を入れて読めば若干良くなるという話を聞いたので試してみた。それがKoyoneNext だ。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="section"&gt;思考クラスたち&lt;/h2&gt;

&lt;h3 id="koyone"&gt;Koyone&lt;/h3&gt;
&lt;p&gt;単純にある程度の深さまで全探索を試みる。
評価関数はグリッド上の数字について、その数字にその数字のlog2 をとったものを掛けてたものの和。
それが一番大きくなるものの存在する方向に動かす。
&lt;a href="https://nna774.net/blog/2014/05/13/2048.html"&gt;前回&lt;/a&gt; の時の思考はこれだった。&lt;/p&gt;

&lt;h3 id="koyonenext"&gt;KoyoneNext&lt;/h3&gt;
&lt;p&gt;基本的にはKoyone と同じ。nextPossibleWorld だけを上記のように変更してある。
ちょっと以前のより強くなった。&lt;/p&gt;

&lt;h3 id="kihime"&gt;Kihime&lt;/h3&gt;
&lt;p&gt;モンテカルロによる探索を実装しようとしてまだ中身は空だ。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>nginx に移行していた</title>
    <link rel="alternate" href="https://nna774.net/blog/2014/05/13/nginx.html"/>
    <id>https://nna774.net/blog/2014/05/13/nginx.html</id>
    <published>2014-05-13T11:46:00+09:00</published>
    <updated>2014-05-13T11:53:26+09:00</updated>
    <author>
      <name>NoNameA 774</name>
    </author>
    <content type="html">&lt;p&gt;HeartBleed の時にRaspberry Pi のOS をArch に変えたので、nginx 1.6 が簡単に使えるみたいだったので、乗りかえた。&lt;/p&gt;

&lt;p&gt;nginx 1.6 ではなんとデフォルトでSPDY に対応している！&lt;/p&gt;

&lt;p&gt;というわけでnna774.net もSPDY に対応しました。&lt;/p&gt;

&lt;p&gt;quic も試してみたいけれど、まだ対応してるものは無いっぽい？ですね……&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>2048-AI コンテスト</title>
    <link rel="alternate" href="https://nna774.net/blog/2014/05/13/2048.html"/>
    <id>https://nna774.net/blog/2014/05/13/2048.html</id>
    <published>2014-05-13T01:49:00+09:00</published>
    <updated>2014-05-13T09:35:32+09:00</updated>
    <author>
      <name>NoNameA 774</name>
    </author>
    <content type="html">&lt;p&gt;KMC で2048 のAI の強さを競うコンテストがあった。&lt;/p&gt;

&lt;p&gt;2048 as a Servise を使ってたたかうもので、言語や環境等は自由であった。&lt;/p&gt;

&lt;p&gt;まず始めにruby のサンプルコードを書いた。&lt;a href="https://github.com/nna774/2048-ruby/tree/randomMove"&gt;サンプルコード&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そのまましばらくruby で書きつづけていた(mikutter のプラグイン以外でruby を書くのは初めてだった)。 このへんまで書いた。 &lt;a href="https://github.com/nna774/2048-ruby"&gt;nna774/2048-ruby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ナイーブに全探索を数手先までしているようなかんじだった。&lt;/p&gt;

&lt;p&gt;どうにも遅かったのでC++ で書きなおした。実際に使ったのが&lt;a href="https://github.com/nna774/2048-cpp/tree/512/"&gt;これ&lt;/a&gt; です。モンテカルロも実装しかけてたけど、バグバグだったのであきらめた。レポジトリは&lt;a href="https://github.com/nna774/2048-cpp"&gt;ココ&lt;/a&gt;。 名前はkoyone です。&lt;/p&gt;

&lt;p&gt;結果はこんな感じ。&lt;/p&gt;

&lt;p&gt;&lt;img alt="" src="/blog/2014/05/13/rank.png" /&gt;&lt;/p&gt;

&lt;p&gt;かろうじて5位でした。&lt;/p&gt;

&lt;p&gt;もっと次回までには強くしないといけない。&lt;/p&gt;

&lt;p&gt;次回コンテストは6/4。 それまでに強化しよう……&lt;/p&gt;

&lt;h1 id="ref"&gt;ref&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://kmc.hatenablog.jp/entry/2014/05/12/021050"&gt;2048AIコンテストを開催します！ - KMC活動ブログ&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>lifepng</title>
    <link rel="alternate" href="https://nna774.net/blog/2014/04/25/lifepng.html"/>
    <id>https://nna774.net/blog/2014/04/25/lifepng.html</id>
    <published>2014-04-25T01:11:00+09:00</published>
    <updated>2014-04-25T01:17:53+09:00</updated>
    <author>
      <name>NoNameA 774</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://nna774.net/lifepng/"&gt;LifePNG&lt;/a&gt; を作った。
&lt;a href="https://github.com/nna774/lifepng"&gt;Github レポジトリ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="グライダー" src="/img/glider.png" /&gt;
こんな画像を簡単に作れるようなやつです。&lt;/p&gt;

&lt;p&gt;&lt;img alt="時計2 - Gif Animation" src="/img/life/clock2.gif" /&gt; 
こんなのもできる。&lt;/p&gt;

&lt;p&gt;くわしくは&lt;a href="https://github.com/nna774/lifepng"&gt;Github レポジトリ&lt;/a&gt; を参照してください。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ミッドナイト念仏に行った</title>
    <link rel="alternate" href="https://nna774.net/blog/2014/04/20/nidnight.html"/>
    <id>https://nna774.net/blog/2014/04/20/nidnight.html</id>
    <published>2014-04-20T01:34:00+09:00</published>
    <updated>2014-04-25T01:37:19+09:00</updated>
    <author>
      <name>NoNameA 774</name>
    </author>
    <content type="html">&lt;p&gt;昨日(暦としては18日の夜)、ミッドナイト念仏に行った。&lt;/p&gt;

&lt;h1 id="is-"&gt;is 何&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://www.chion-in.or.jp/03_gyoji/tei/gyok.html"&gt;公式ページ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;知恩院で行なわれる法然上人の法要のイベント(?) のうちの一つである。&lt;/p&gt;

&lt;iframe src="https://www.flickr.com/photos/nna774/13902685426/in/set-72157644071467422/player/" width="500" height="375" frameborder="0" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen="" oallowfullscreen="" msallowfullscreen=""&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href="https://www.flickr.com/photos/nna774/sets/72157644071467422/"&gt;set&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;夜通し木魚を叩きつづけるイベントである(こんなふうに書いたら怒られそうだ)。&lt;/p&gt;

&lt;p&gt;普段は入れない知恩院三門に入ることができるイベントでもある。&lt;/p&gt;

&lt;h1 id="beat"&gt;かなり低く見積っても数万回のBeat&lt;/h1&gt;

&lt;p&gt;三時ぐらいに知恩院に行って朝まで木魚を叩きつづけた。&lt;/p&gt;

&lt;p&gt;中で撮影は禁止されていたけれど、特に録音は禁止されてなかったので、すこしだけ録音した。&lt;/p&gt;

&lt;p&gt;&lt;a href="/blog/2014/04/20/nenbutsu.ogg"&gt;nenbutsu.ogg&lt;/a&gt;&lt;/p&gt;

&lt;iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/145490050&amp;amp;color=ff5500&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_artwork=true"&gt;&lt;/iframe&gt;

&lt;p&gt;謎のトランス感のあるイベントであった。&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>mod_rewrite</title>
    <link rel="alternate" href="https://nna774.net/blog/2014/04/10/mod_rewrite.html"/>
    <id>https://nna774.net/blog/2014/04/10/mod_rewrite.html</id>
    <published>2014-04-10T00:39:00+09:00</published>
    <updated>2014-04-10T00:48:45+09:00</updated>
    <author>
      <name>NoNameA 774</name>
    </author>
    <content type="html">&lt;p&gt;現状、このページは、静的html等は事前にgzip で圧縮して、それをmod_rewrite でいいかんじにURL を書きかえてAccept-Encoding: gzip があればgzip版を返すよう設定してある。
……と思ってたんだけれども、Accept-Encoding: gzip がついてなくても、gzip で返したり、対応するgz ファイルが存在しないと404 になったりしていた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RewriteCond %{HTTP:Accept-encoding} gzip
RewriteCond %{REQUEST_FILENAME}.gz -f
RewriteRule ^(.*)\.css$ $1.css.gz [QSA,L]
RewriteRule ^(.*)\.js$ $1.js.gz [QSA,L]
RewriteRule ^(.*)\.html$ $1.html.gz [QSA,L]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように書いていた。&lt;/p&gt;

&lt;p&gt;調べていると、結局、RewriteCond が影響するのは、次のRewriteRule だけであることがわかった。
それでAccept-Encoding: gzip のないindex.html へのアクセスにもgzip圧縮されたものを返したり、index.html.gz がないと404 になったりしていたのだ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RewriteCond %{HTTP:Accept-encoding} gzip
RewriteCond %{REQUEST_FILENAME}.gz -f
RewriteRule ^(.*)\.css$ $1.css.gz [QSA,L]
RewriteCond %{HTTP:Accept-encoding} gzip
RewriteCond %{REQUEST_FILENAME}.gz -f
RewriteRule ^(.*)\.js$ $1.js.gz [QSA,L]
RewriteCond %{HTTP:Accept-encoding} gzip
RewriteCond %{REQUEST_FILENAME}.gz -f
RewriteRule ^(.*)\.html$ $1.html.gz [QSA,L]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように書きなおした現在、期待どうりの挙動をしているように見える。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Heartbleed</title>
    <link rel="alternate" href="https://nna774.net/blog/2014/04/09/heartbleed.html"/>
    <id>https://nna774.net/blog/2014/04/09/heartbleed.html</id>
    <published>2014-04-09T23:03:00+09:00</published>
    <updated>2014-04-09T23:13:07+09:00</updated>
    <author>
      <name>NoNameA 774</name>
    </author>
    <content type="html">&lt;p&gt;最近流行りのOpenSSL のバグですが、うちのRaspberry Pi の上のRaspbian にすぐにアップデートが来なかったので、これを機にArch Linux に乗り変えることにした。&lt;/p&gt;

&lt;p&gt;まだいろいろ設定している途中ですが、とりあえず80番と443番だけNAT を通すようにしてここも復活。&lt;/p&gt;

&lt;p&gt;SSL の秘密鍵とりかえたいけどStart SSL は再発行にお金かかるらしいし、うーん ってかんじだ。
そもそも攻撃に狙われた可能性は低いとは思うけれど……(よくない考え方だ。安全側に倒すべきではある)&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>atom</title>
    <link rel="alternate" href="https://nna774.net/blog/2014/04/07/atom.html"/>
    <id>https://nna774.net/blog/2014/04/07/atom.html</id>
    <published>2014-04-07T00:00:00+09:00</published>
    <updated>2014-04-25T01:36:59+09:00</updated>
    <author>
      <name>NoNameA 774</name>
    </author>
    <content type="html">&lt;h1 id="section"&gt;11歳ですよもう&lt;/h1&gt;
&lt;p&gt;鉄腕アトムも11歳。 だいぶ未来に来てしまった……&lt;/p&gt;

&lt;h1 id="section-1"&gt;もざいく&lt;/h1&gt;
&lt;p&gt;アトムの誕生日は、電気の恋人の歌詞で覚えている。&lt;/p&gt;

&lt;p&gt;歌詞： &lt;a href="http://www.sham.jp/studio/sound/denki/index.shtml"&gt;Sham Studio&lt;/a&gt; (リンク先音注意)&lt;/p&gt;

&lt;pre&gt;2003年4月7日に　未来のロボが生まれなくても&lt;/pre&gt;

&lt;h2 id="section-2"&gt;電気の恋人&lt;/h2&gt;
&lt;p&gt;私の小さな時にはもう&lt;em&gt;PC&lt;/em&gt; 98 ではなくて、&lt;em&gt;Windows&lt;/em&gt; 98 が家にあったような時代であったので、この曲の歌詞の最初のほうのような事は実際にはやったことは無いのだけれど(私の初めて触ったBASIC はWindows98 の上での&lt;a href="http://hp.vector.co.jp/authors/VA008683/"&gt;十進BASIC&lt;/a&gt;だ。プログラムの意味もよくわからないまま、豊富に同梱されていたサンプルプログラムを改造してみていた)、それでも、この曲を初めて聞いてからだけの機械の進化はすさまじくて、この曲自体を&lt;a href="http://www.enterbrain.co.jp/magical-cute/sp/heartsnative/songlist.html"&gt;機械が歌う&lt;/a&gt;ほどだ。&lt;/p&gt;

&lt;p&gt;小さい時に聞いていたこの歌をミクが歌うというのは、なんというか、機械の進歩を強く表わしている気がして本当に好きだ。&lt;/p&gt;

&lt;p&gt;この曲の入ったCD は現在入手困難ですが(わたしも欲しい)、&lt;a href="http://www.amazon.co.jp/dp/B00569BHDY"&gt;Amazon&lt;/a&gt; や&lt;a href="https://itunes.apple.com/jp/album/id106636118"&gt;iTunes&lt;/a&gt; なら購入することができます。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.enterbrain.co.jp/magical-cute/sp/heartsnative/"&gt;Heartsnative&lt;/a&gt; は他にも、「みんなみくみくにしてあげる♪」は"機械と人間" って感じがしてすごくいいと思う(そういう意味では、&lt;a href="http://www.mosaictune.com/"&gt;Heartsnative2&lt;/a&gt; のほうはミクしか歌っていないので、比べると好きじゃない)。&lt;/p&gt;

&lt;p&gt;何が言いたいかよくわからない記事になってしまった。アトムの誕生日はどっかにいってミクが好き って記事になってるし。しかも遅れて公開だし。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>クロスコンパイラbuild できた</title>
    <link rel="alternate" href="https://nna774.net/blog/2014/03/24/sakura.html"/>
    <id>https://nna774.net/blog/2014/03/24/sakura.html</id>
    <published>2014-03-24T06:12:00+09:00</published>
    <updated>2014-03-24T06:15:52+09:00</updated>
    <author>
      <name>NoNameA 774</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://nna774.net/blog/2014/03/22/sakura.html"&gt;前回&lt;/a&gt; build できないっていってたけど、&lt;a href="http://www.kpitgnutools.com/sourceCode.php"&gt;ここ&lt;/a&gt; のv13.01 を使っていたことに気づいたので、v14.01 のコードをおとしてきて、&lt;a href="http://qiita.com/jjzak/items/8e9d9d98370181aa97fa"&gt;これ&lt;/a&gt; のとうりにやったらできた。&lt;/p&gt;
</content>
  </entry>
</feed>
